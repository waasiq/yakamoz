expr            : KEYWORD: oyleki IDENTIFIER EQUALS expr
                : comp-expr ((KEYWORD: AND | KEYWORD: OR) comp-expr)*

comp-expr       : NOT comp-expr
                : (arith-expr ((DEQUAL, NEQUAL | GT | GTE | LT | LTE) arith-expr))*

arith-expr      : term ((ADD | SUB) term)*

term            : factor ((MUL | DIV) factor)*

factor          : (ADD | SUB) factor
                : power

power           : call (POW factor)*

call            : atom (LBRACKET (expr (COMMA expr)*)? RBRACKET)?

atom            : INT | FLOAT | STRING | IDENTIFIER
                : LBRACKET expr RBRACKET
                : list-expr
                : if-expr
                : for-expr
                : while-expr 
                : func

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE 

if-expr         : KEYWORD: if expr KEYWORD: then expr
                |  (KEYWORD: elseif expr KEYWORD: then expr)*
                |  (KEYWORD: else expr) ?

for-expr        : KEYWORD: for IDENTIFIER EQ expr KEYWORD: to expr
                | (STEP expr)?
                | KEYWORD: then expr

while-expr      : KEYWORD: while expr KEYWORD: then expr

func            : KEYWORD: func IDENTIFIER?
                | LBRACKET (IDENTIFIER (COMMA IDENTIFIER)* )? RBRACKET
                | ARROW expr